apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: cdc-webhook
  namespace: ceer-cdc
  labels:
    app: cdc-webhook
spec:
  resourceConfiguration:
    function:
      profile: XS
  runtime: nodejs20
  env:
    - name: CDC_API_KEY
      valueFrom:
        secretKeyRef:
          key: CDC_API_KEY
          name: cdc-webhook-secret
    - name: CDC_KID
      valueFrom:
        secretKeyRef:
          key: CDC_KID
          name: cdc-webhook-secret
    - name: CDC_N_MODULUS
      valueFrom:
        secretKeyRef:
          key: CDC_N_MODULUS
          name: cdc-webhook-secret
    - name: CDC_E_EXPONENT
      valueFrom:
        secretKeyRef:
          key: CDC_E_EXPONENT
          name: cdc-webhook-secret
  source:
    inline:
      dependencies: |
        {
          "name": "cdc-webhook",
          "version": "1.0.0",
          "main": "server.mjs",
          "type": "module",
          "dependencies": {
            "jsonwebtoken": "^9.0.2",
            "rsa-pem-from-mod-exp": "^0.8.6"
          }
        }
      source: |
        import jwt from "jsonwebtoken";
        import getPem from "rsa-pem-from-mod-exp";

        const verifyJWT = async function (sigJwt, nModulus, eExponent) {
          try {
            const cert = getPem(nModulus, eExponent);
            const payload = jwt.verify(sigJwt, cert, { algorithms: ["RS256"] });
            console.log("Verified payload: ", JSON.stringify(payload));
            return true;
          } catch (err) {
            console.log("Error verifying the JWT: ", JSON.stringify(err));
            return false;
          }
        };

        const processEvents = async function (events) {
          console.log("events: ", JSON.stringify(events));
        };

        export async function main(event, context) {
          var nModulus = process.env.CDC_N_MODULUS;
          var eExponent = process.env.CDC_E_EXPONENT;
          const res = event.extensions.response;

          if (event) {
            const headers = event.extensions.request.headers;
            var sigJwt = headers["x-gigya-sig-jwt"];

            console.log("x-gigya-sig-jwt:", sigJwt);
            var decoded = jwt.decode(sigJwt, { complete: true });

            if (decoded.header.kid !== process.env.CDC_KID) {
              console.log("Invalid kid: ", decoded.header.kid);
              res.status(400);
              return;
            }

            var verified = await verifyJWT(sigJwt, nModulus, eExponent);

            if (!verified) {
              res.status(400);
              return;
            }

            if (event.data.events) {
              await processEvents(event.data.events);
            }
          }

          res.status(200);
          return;
        }
