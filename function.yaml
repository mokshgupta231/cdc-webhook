apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: cdc-subscription-webhook
  namespace: ceer-cdc
  labels:
    app: cdc-subscription-webhook
spec:
  resourceConfiguration:
    function:
      profile: XS
  runtime: nodejs20
  env:
    - name: PUBLISHER_URL
      value: "http://eventing-event-publisher-proxy.kyma-system/publish"
    - name: EVENT_SOURCE
      value: "/default/sap.kyma.custom/cdc.1"
    - name: EVENT_TYPE
      value: "sap.kyma.custom.cdc.subscription.updated.v1"
    - name: CDC_API_KEY
      valueFrom:
        secretKeyRef:
          key: CDC_API_KEY
          name: cdc-subscription-webhook-secret
    - name: CDC_KID
      valueFrom:
        secretKeyRef:
          key: CDC_KID
          name: cdc-subscription-webhook-secret
    - name: CDC_N_MODULUS
      valueFrom:
        secretKeyRef:
          key: CDC_N_MODULUS
          name: cdc-subscription-webhook-secret
    - name: CDC_E_EXPONENT
      valueFrom:
        secretKeyRef:
          key: CDC_E_EXPONENT
          name: cdc-subscription-webhook-secret
  source:
    inline:
      dependencies: |
        {
          "name": "cdc-subscription-webhook",
          "version": "1.0.0",
          "main": "server.mjs",
          "type": "module",
          "dependencies": {
            "axios": "^1.8.4",
            "jsonwebtoken": "^9.0.2",
            "rsa-pem-from-mod-exp": "^0.8.6",
            "cloudevents": "^8.0.2"
          }
        }
      source: |
        import axios from "axios";
        import jwt from "jsonwebtoken";
        import getPem from "rsa-pem-from-mod-exp";
        import { HTTP, CloudEvent } from "cloudevents";

        const getJWTPublicKey = async function() {
          return await axios({
            method: "get",
            url: "https://accounts.us1.gigya.com/accounts.getJWTPublicKey",
            params: { apiKey: process.env.CDC_API_KEY, V2: "true" }
          });
        }

        const verifyJWT = async function (sigJwt, nModulus, eExponent) {
          try {
            const cert = getPem(nModulus, eExponent);
            const payload = await jwt.verify(sigJwt, cert, { algorithms: ["RS256"] });
            console.log("Verified payload: ", JSON.stringify(payload));
            return true;
          } catch (err) {
            console.log("Error verifying the JWT: ", JSON.stringify(err));
            return false;
          }
        };

        const processEvents = async function(events) {
          console.log("events: ", JSON.stringify(events));
          for (const [key, event] of Object.entries(events)) {
            await processEvent(event);
          }
        }

        const processEvent = async function(event) {
          if (event.type === "subscriptionUpdated") {

            const ce = new CloudEvent({
              id: event.id,
              type: process.env.EVENT_TYPE,
              source: process.env.EVENT_SOURCE,
              data: event.data,
              datacontenttype: "application/json"
            });

            const message = HTTP.structured(ce);

            var publishResponse = await axios({
              method: "post",
              url: process.env.PUBLISHER_URL,
              data: message.body,
              headers: message.headers
            });

            if (publishResponse && publishResponse.config) {
              console.log(publishResponse.config.data);
            }

          }
        };

        export async function main(event, context) {

            var nModulus = process.env.CDC_N_MODULUS;
            var eExponent = process.env.CDC_E_EXPONENT;

            if (event) {

              const headers = event.extensions.request.headers;
              var sigJwt = headers["x-gigya-sig-jwt"];

              if (sigJwt) {

                console.log("x-gigya-sig-jwt:", sigJwt);
                var decoded = await jwt.decode(sigJwt, { complete: true });
                // Start - validate kid and update nModulus & eExponent
                if (process.env.CDC_KID !== decoded.header.kid) {

                  var getJWTPublicKeyResponse = await getJWTPublicKey();

                  if (getJWTPublicKeyResponse && getJWTPublicKeyResponse.status === 200 
                    && getJWTPublicKeyResponse.data && getJWTPublicKeyResponse.data.statusCode === 200) {
                      for (const [key, value] of Object.entries(getJWTPublicKeyResponse.data.keys)) {
                        if (process.env.CDC_KID === value.kid) {
                          nModulus = value.n;
                          eExponent =  value.e;
                          break;
                        }
                      }
                  }

                }
                // End - validate kid and update nModulus & eExponent

                // Start - verify the JWT
                var verified = await verifyJWT(sigJwt, nModulus, eExponent);
                // End - verify the JWT

                // Start - Send events to event mesh queue
                if (verified && event.data.events) {
                  await processEvents(event.data.events);
                }
                // End - Send events to event mesh queue

              }

            }

            const res = event.extensions.response;
            res.status(200);
            return;

          }
