apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: cdc-webhook
  namespace: ceer-cdc
  labels:
    app: cdc-webhook
spec:
  resourceConfiguration:
    function:
      profile: XS
  runtime: nodejs20
  env:
  - name: CDC_API_KEY
    valueFrom:
      secretKeyRef:
        key: CDC_API_KEY
        name: cdc-webhook-secret
  - name: CDC_KID
    valueFrom:
      secretKeyRef:
        key: CDC_KID
        name: cdc-webhook-secret
  - name: CDC_N_MODULUS
    valueFrom:
      secretKeyRef:
        key: CDC_N_MODULUS
        name: cdc-webhook-secret
  - name: CDC_E_EXPONENT
    valueFrom:
      secretKeyRef:
        key: CDC_E_EXPONENT
        name: cdc-webhook-secret
  source:
    inline:
      dependencies: |
        {
          "name": "cdc-webhook",
          "version": "1.0.0",
          "main": "server.mjs",
          "type": "module",
          "dependencies": {
            "axios": "^1.8.4",
            "jsonwebtoken": "^9.0.2",
            "rsa-pem-from-mod-exp": "^0.8.6"
          }
        }
      source: |
        import axios from "axios";
        import jwt from "jsonwebtoken";
        import getPem from "rsa-pem-from-mod-exp";

        const getJWTPublicKey = async () => {
          const response = await axios.get(
            "https://accounts.gigya.com/accounts.getJWTPublicKey",
            {
              params: { apiKey: process.env.CDC_API_KEY, V2: true },
            }
          );
          return response;
        };

        const verifyJWT = (sigJwt, nModulus, eExponent) => {
          try {
            const cert = getPem(nModulus, eExponent);
            const payload = jwt.verify(sigJwt, cert, { algorithms: ["RS256"] });
            return true;
          } catch (err) {
            console.error("Error verifying JWT: ", err);
            return false;
          }
        };

        const processEvents = (events) => {
          const getCircularReplacer = () => {
            const seen = new WeakSet();
            return (key, value) => {
              if (typeof value === "object" && value !== null) {
                if (seen.has(value)) {
                  return;
                }
                seen.add(value);
              }
              return value;
            };
          };
          
          console.log("Processing events: ", JSON.stringify(events, getCircularReplacer()));
        };

        export async function main(event, context) {
          const { CDC_N_MODULUS, CDC_E_EXPONENT } = process.env;
          const res = event.extensions.response;

          try {
            if (!event) return res.status(400).json({ error: "No event provided" });

            const headers = event.extensions.request.headers;
            const sigJwt = headers["x-gigya-sig-jwt"];

            if (!sigJwt) return res.status(400).json({ error: "Missing JWT signature" });

            const decoded = jwt.decode(sigJwt, { complete: true });

            if (!decoded?.header?.kid) {
              console.error("JWT missing 'kid'");
              return res.status(400).json({ error: "Invalid JWT: missing kid" });
            }

            let nModulus = CDC_N_MODULUS;
            let eExponent = CDC_E_EXPONENT;

            try {
              const { data } = await getJWTPublicKey();
              if (data?.statusCode === 200) {
                const key = data.keys.find((key) => key.kid === decoded.header.kid);
                if (key) {
                  nModulus = key.n;
                  eExponent = key.e;
                }
              }
            } catch (err) {
              console.error("Error fetching JWT public key: ", err);
            }

            if (!verifyJWT(sigJwt, nModulus, eExponent)) {
              return res.status(400).json({ error: "JWT verification failed" });
            }

            if (event.data?.events) {
              processEvents(event.data.events);
            }

            return res.status(200).json({ success: true });
          } catch (error) {
            console.error("Unhandled error:", error);
            return res.status(500).json({ error: "Internal server error" });
          }
        }
